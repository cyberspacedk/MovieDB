// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Container: LoginForm Snapshot: should match 1`] = `
<LoginForm
  authRequest={[Function]}
  dirty={false}
  errors={Object {}}
  handleBlur={[Function]}
  handleChange={[Function]}
  handleReset={[Function]}
  handleSubmit={[Function]}
  initialValues={
    Object {
      "password": "",
      "username": "",
    }
  }
  isSubmitting={false}
  isValid={false}
  isValidating={false}
  registerField={[Function]}
  resetForm={[Function]}
  sessionID={true}
  setError={[Function]}
  setErrors={[Function]}
  setFieldError={[Function]}
  setFieldTouched={[Function]}
  setFieldValue={[Function]}
  setFormikState={[Function]}
  setStatus={[Function]}
  setSubmitting={[Function]}
  setTouched={[Function]}
  setValues={[Function]}
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
  submitCount={0}
  submitForm={[Function]}
  touched={Object {}}
  unregisterField={[Function]}
  username="movie__watcher"
  validateField={[Function]}
  validateForm={[Function]}
  validateOnBlur={true}
  validateOnChange={true}
  values={
    Object {
      "password": "",
      "username": "",
    }
  }
>
  <div
    className="center"
  >
    <Adapter>
      <BasicLayout
        prefixCls="ant-layout"
        tagName="section"
      >
        <section
          className="ant-layout"
        >
          <Adapter>
            <Basic
              prefixCls="ant-layout-content"
              tagName="main"
            >
              <main
                className="ant-layout-content"
              >
                <Row
                  gutter={0}
                  justify="center"
                  type="flex"
                >
                  <div
                    className="ant-row-flex ant-row-flex-center"
                  >
                    <Typography>
                      <article
                        className="ant-typography"
                      >
                        <Title>
                          <withConfigConsumer(Base)
                            component="h1"
                          >
                            <Base
                              component="h1"
                              getPrefixCls={[Function]}
                              prefixCls="ant-typography"
                              renderEmpty={[Function]}
                            >
                              <LocaleReceiver
                                componentName="Text"
                              >
                                <ReactResizeObserver
                                  disabled={true}
                                  onResize={[Function]}
                                >
                                  <Typography
                                    aria-label={null}
                                    className=""
                                    component="h1"
                                    setContentRef={[Function]}
                                    style={
                                      Object {
                                        "WebkitLineClamp": null,
                                      }
                                    }
                                  >
                                    <h1
                                      aria-label={null}
                                      className="ant-typography"
                                      style={
                                        Object {
                                          "WebkitLineClamp": null,
                                        }
                                      }
                                    >
                                      The Movie DB
                                    </h1>
                                  </Typography>
                                </ReactResizeObserver>
                              </LocaleReceiver>
                            </Base>
                          </withConfigConsumer(Base)>
                        </Title>
                        <Form>
                          <Component
                            formik={
                              Object {
                                "dirty": false,
                                "errors": Object {},
                                "handleBlur": [Function],
                                "handleChange": [Function],
                                "handleReset": [Function],
                                "handleSubmit": [Function],
                                "initialValues": Object {
                                  "password": "",
                                  "username": "",
                                },
                                "isSubmitting": false,
                                "isValid": false,
                                "isValidating": false,
                                "registerField": [Function],
                                "resetForm": [Function],
                                "setError": [Function],
                                "setErrors": [Function],
                                "setFieldError": [Function],
                                "setFieldTouched": [Function],
                                "setFieldValue": [Function],
                                "setFormikState": [Function],
                                "setStatus": [Function],
                                "setSubmitting": [Function],
                                "setTouched": [Function],
                                "setValues": [Function],
                                "status": undefined,
                                "submitCount": 0,
                                "submitForm": [Function],
                                "touched": Object {},
                                "unregisterField": [Function],
                                "validate": undefined,
                                "validateField": [Function],
                                "validateForm": [Function],
                                "validateOnBlur": true,
                                "validateOnChange": true,
                                "validationSchema": [Function],
                                "values": Object {
                                  "password": "",
                                  "username": "",
                                },
                              }
                            }
                          >
                            <form
                              onReset={[Function]}
                              onSubmit={[Function]}
                            >
                              <FormikConnect(FieldInner)
                                component={[Function]}
                                name="username"
                                placeholder="Username"
                              >
                                <FieldInner
                                  component={[Function]}
                                  formik={
                                    Object {
                                      "dirty": false,
                                      "errors": Object {},
                                      "handleBlur": [Function],
                                      "handleChange": [Function],
                                      "handleReset": [Function],
                                      "handleSubmit": [Function],
                                      "initialValues": Object {
                                        "password": "",
                                        "username": "",
                                      },
                                      "isSubmitting": false,
                                      "isValid": false,
                                      "isValidating": false,
                                      "registerField": [Function],
                                      "resetForm": [Function],
                                      "setError": [Function],
                                      "setErrors": [Function],
                                      "setFieldError": [Function],
                                      "setFieldTouched": [Function],
                                      "setFieldValue": [Function],
                                      "setFormikState": [Function],
                                      "setStatus": [Function],
                                      "setSubmitting": [Function],
                                      "setTouched": [Function],
                                      "setValues": [Function],
                                      "status": undefined,
                                      "submitCount": 0,
                                      "submitForm": [Function],
                                      "touched": Object {},
                                      "unregisterField": [Function],
                                      "validate": undefined,
                                      "validateField": [Function],
                                      "validateForm": [Function],
                                      "validateOnBlur": true,
                                      "validateOnChange": true,
                                      "validationSchema": [Function],
                                      "values": Object {
                                        "password": "",
                                        "username": "",
                                      },
                                    }
                                  }
                                  name="username"
                                  placeholder="Username"
                                >
                                  <FormField
                                    field={
                                      Object {
                                        "name": "username",
                                        "onBlur": [Function],
                                        "onChange": [Function],
                                        "value": "",
                                      }
                                    }
                                    form={
                                      Object {
                                        "dirty": false,
                                        "errors": Object {},
                                        "handleBlur": [Function],
                                        "handleChange": [Function],
                                        "handleReset": [Function],
                                        "handleSubmit": [Function],
                                        "initialValues": Object {
                                          "password": "",
                                          "username": "",
                                        },
                                        "isSubmitting": false,
                                        "isValid": false,
                                        "isValidating": false,
                                        "registerField": [Function],
                                        "resetForm": [Function],
                                        "setError": [Function],
                                        "setErrors": [Function],
                                        "setFieldError": [Function],
                                        "setFieldTouched": [Function],
                                        "setFieldValue": [Function],
                                        "setFormikState": [Function],
                                        "setStatus": [Function],
                                        "setSubmitting": [Function],
                                        "setTouched": [Function],
                                        "setValues": [Function],
                                        "status": undefined,
                                        "submitCount": 0,
                                        "submitForm": [Function],
                                        "touched": Object {},
                                        "unregisterField": [Function],
                                        "validateField": [Function],
                                        "validateForm": [Function],
                                        "validateOnBlur": true,
                                        "validateOnChange": true,
                                        "values": Object {
                                          "password": "",
                                          "username": "",
                                        },
                                      }
                                    }
                                    placeholder="Username"
                                  >
                                    <FormItem
                                      hasFeedback={false}
                                    >
                                      <Row
                                        className="ant-form-item"
                                        gutter={0}
                                        key="row"
                                      >
                                        <div
                                          className="ant-row ant-form-item"
                                        >
                                          <Col
                                            className="ant-form-item-control-wrapper"
                                          >
                                            <div
                                              className="ant-col ant-form-item-control-wrapper"
                                            >
                                              <div
                                                className="ant-form-item-control"
                                              >
                                                <span
                                                  className="ant-form-item-children"
                                                >
                                                  <Input
                                                    disabled={false}
                                                    name="username"
                                                    onBlur={[Function]}
                                                    onChange={[Function]}
                                                    placeholder="Username"
                                                    prefix={
                                                      <Icon
                                                        style={
                                                          Object {
                                                            "color": "rgba(0,0,0,.25)",
                                                          }
                                                        }
                                                        type="user"
                                                      />
                                                    }
                                                    type="text"
                                                    value=""
                                                  >
                                                    <span
                                                      className="ant-input-affix-wrapper"
                                                    >
                                                      <span
                                                        className="ant-input-prefix"
                                                      >
                                                        <Icon
                                                          style={
                                                            Object {
                                                              "color": "rgba(0,0,0,.25)",
                                                            }
                                                          }
                                                          type="user"
                                                        >
                                                          <LocaleReceiver
                                                            componentName="Icon"
                                                          >
                                                            <i
                                                              aria-label="icon: user"
                                                              className="anticon anticon-user"
                                                              style={
                                                                Object {
                                                                  "color": "rgba(0,0,0,.25)",
                                                                }
                                                              }
                                                            >
                                                              <IconReact
                                                                className=""
                                                                type="user-o"
                                                              >
                                                                <svg
                                                                  aria-hidden="true"
                                                                  className=""
                                                                  data-icon="user"
                                                                  fill="currentColor"
                                                                  focusable="false"
                                                                  height="1em"
                                                                  key="svg-user"
                                                                  viewBox="64 64 896 896"
                                                                  width="1em"
                                                                >
                                                                  <path
                                                                    d="M858.5 763.6a374 374 0 0 0-80.6-119.5 375.63 375.63 0 0 0-119.5-80.6c-.4-.2-.8-.3-1.2-.5C719.5 518 760 444.7 760 362c0-137-111-248-248-248S264 225 264 362c0 82.7 40.5 156 102.8 201.1-.4.2-.8.3-1.2.5-44.8 18.9-85 46-119.5 80.6a375.63 375.63 0 0 0-80.6 119.5A371.7 371.7 0 0 0 136 901.8a8 8 0 0 0 8 8.2h60c4.4 0 7.9-3.5 8-7.8 2-77.2 33-149.5 87.8-204.3 56.7-56.7 132-87.9 212.2-87.9s155.5 31.2 212.2 87.9C779 752.7 810 825 812 902.2c.1 4.4 3.6 7.8 8 7.8h60a8 8 0 0 0 8-8.2c-1-47.8-10.9-94.3-29.5-138.2zM512 534c-45.9 0-89.1-17.9-121.6-50.4S340 407.9 340 362c0-45.9 17.9-89.1 50.4-121.6S466.1 190 512 190s89.1 17.9 121.6 50.4S684 316.1 684 362c0 45.9-17.9 89.1-50.4 121.6S557.9 534 512 534z"
                                                                    key="svg-user-svg-0"
                                                                  />
                                                                </svg>
                                                              </IconReact>
                                                            </i>
                                                          </LocaleReceiver>
                                                        </Icon>
                                                      </span>
                                                      <input
                                                        className="ant-input"
                                                        disabled={false}
                                                        name="username"
                                                        onBlur={[Function]}
                                                        onChange={[Function]}
                                                        onKeyDown={[Function]}
                                                        placeholder="Username"
                                                        style={null}
                                                        type="text"
                                                        value=""
                                                      />
                                                    </span>
                                                  </Input>
                                                </span>
                                                <Animate
                                                  animation={Object {}}
                                                  component=""
                                                  componentProps={Object {}}
                                                  key="help"
                                                  onAppear={[Function]}
                                                  onEnd={[Function]}
                                                  onEnter={[Function]}
                                                  onLeave={[Function]}
                                                  transitionAppear={true}
                                                  transitionEnter={true}
                                                  transitionLeave={true}
                                                  transitionName="show-help"
                                                />
                                              </div>
                                            </div>
                                          </Col>
                                        </div>
                                      </Row>
                                    </FormItem>
                                  </FormField>
                                </FieldInner>
                              </FormikConnect(FieldInner)>
                              <FormikConnect(FieldInner)
                                component={[Function]}
                                name="password"
                                placeholder="Password"
                              >
                                <FieldInner
                                  component={[Function]}
                                  formik={
                                    Object {
                                      "dirty": false,
                                      "errors": Object {},
                                      "handleBlur": [Function],
                                      "handleChange": [Function],
                                      "handleReset": [Function],
                                      "handleSubmit": [Function],
                                      "initialValues": Object {
                                        "password": "",
                                        "username": "",
                                      },
                                      "isSubmitting": false,
                                      "isValid": false,
                                      "isValidating": false,
                                      "registerField": [Function],
                                      "resetForm": [Function],
                                      "setError": [Function],
                                      "setErrors": [Function],
                                      "setFieldError": [Function],
                                      "setFieldTouched": [Function],
                                      "setFieldValue": [Function],
                                      "setFormikState": [Function],
                                      "setStatus": [Function],
                                      "setSubmitting": [Function],
                                      "setTouched": [Function],
                                      "setValues": [Function],
                                      "status": undefined,
                                      "submitCount": 0,
                                      "submitForm": [Function],
                                      "touched": Object {},
                                      "unregisterField": [Function],
                                      "validate": undefined,
                                      "validateField": [Function],
                                      "validateForm": [Function],
                                      "validateOnBlur": true,
                                      "validateOnChange": true,
                                      "validationSchema": [Function],
                                      "values": Object {
                                        "password": "",
                                        "username": "",
                                      },
                                    }
                                  }
                                  name="password"
                                  placeholder="Password"
                                >
                                  <FormField
                                    field={
                                      Object {
                                        "name": "password",
                                        "onBlur": [Function],
                                        "onChange": [Function],
                                        "value": "",
                                      }
                                    }
                                    form={
                                      Object {
                                        "dirty": false,
                                        "errors": Object {},
                                        "handleBlur": [Function],
                                        "handleChange": [Function],
                                        "handleReset": [Function],
                                        "handleSubmit": [Function],
                                        "initialValues": Object {
                                          "password": "",
                                          "username": "",
                                        },
                                        "isSubmitting": false,
                                        "isValid": false,
                                        "isValidating": false,
                                        "registerField": [Function],
                                        "resetForm": [Function],
                                        "setError": [Function],
                                        "setErrors": [Function],
                                        "setFieldError": [Function],
                                        "setFieldTouched": [Function],
                                        "setFieldValue": [Function],
                                        "setFormikState": [Function],
                                        "setStatus": [Function],
                                        "setSubmitting": [Function],
                                        "setTouched": [Function],
                                        "setValues": [Function],
                                        "status": undefined,
                                        "submitCount": 0,
                                        "submitForm": [Function],
                                        "touched": Object {},
                                        "unregisterField": [Function],
                                        "validateField": [Function],
                                        "validateForm": [Function],
                                        "validateOnBlur": true,
                                        "validateOnChange": true,
                                        "values": Object {
                                          "password": "",
                                          "username": "",
                                        },
                                      }
                                    }
                                    placeholder="Password"
                                  >
                                    <FormItem
                                      hasFeedback={false}
                                    >
                                      <Row
                                        className="ant-form-item"
                                        gutter={0}
                                        key="row"
                                      >
                                        <div
                                          className="ant-row ant-form-item"
                                        >
                                          <Col
                                            className="ant-form-item-control-wrapper"
                                          >
                                            <div
                                              className="ant-col ant-form-item-control-wrapper"
                                            >
                                              <div
                                                className="ant-form-item-control"
                                              >
                                                <span
                                                  className="ant-form-item-children"
                                                >
                                                  <Input
                                                    disabled={false}
                                                    name="password"
                                                    onBlur={[Function]}
                                                    onChange={[Function]}
                                                    placeholder="Password"
                                                    prefix={
                                                      <Icon
                                                        style={
                                                          Object {
                                                            "color": "rgba(0,0,0,.25)",
                                                          }
                                                        }
                                                        type="lock"
                                                      />
                                                    }
                                                    type="password"
                                                    value=""
                                                  >
                                                    <span
                                                      className="ant-input-affix-wrapper"
                                                    >
                                                      <span
                                                        className="ant-input-prefix"
                                                      >
                                                        <Icon
                                                          style={
                                                            Object {
                                                              "color": "rgba(0,0,0,.25)",
                                                            }
                                                          }
                                                          type="lock"
                                                        >
                                                          <LocaleReceiver
                                                            componentName="Icon"
                                                          >
                                                            <i
                                                              aria-label="icon: lock"
                                                              className="anticon anticon-lock"
                                                              style={
                                                                Object {
                                                                  "color": "rgba(0,0,0,.25)",
                                                                }
                                                              }
                                                            >
                                                              <IconReact
                                                                className=""
                                                                type="lock-o"
                                                              >
                                                                <svg
                                                                  aria-hidden="true"
                                                                  className=""
                                                                  data-icon="lock"
                                                                  fill="currentColor"
                                                                  focusable="false"
                                                                  height="1em"
                                                                  key="svg-lock"
                                                                  viewBox="64 64 896 896"
                                                                  width="1em"
                                                                >
                                                                  <path
                                                                    d="M832 464h-68V240c0-70.7-57.3-128-128-128H388c-70.7 0-128 57.3-128 128v224h-68c-17.7 0-32 14.3-32 32v384c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V496c0-17.7-14.3-32-32-32zM332 240c0-30.9 25.1-56 56-56h248c30.9 0 56 25.1 56 56v224H332V240zm460 600H232V536h560v304zM484 701v53c0 4.4 3.6 8 8 8h40c4.4 0 8-3.6 8-8v-53a48.01 48.01 0 1 0-56 0z"
                                                                    key="svg-lock-svg-0"
                                                                  />
                                                                </svg>
                                                              </IconReact>
                                                            </i>
                                                          </LocaleReceiver>
                                                        </Icon>
                                                      </span>
                                                      <input
                                                        className="ant-input"
                                                        disabled={false}
                                                        name="password"
                                                        onBlur={[Function]}
                                                        onChange={[Function]}
                                                        onKeyDown={[Function]}
                                                        placeholder="Password"
                                                        style={null}
                                                        type="password"
                                                        value=""
                                                      />
                                                    </span>
                                                  </Input>
                                                </span>
                                                <Animate
                                                  animation={Object {}}
                                                  component=""
                                                  componentProps={Object {}}
                                                  key="help"
                                                  onAppear={[Function]}
                                                  onEnd={[Function]}
                                                  onEnter={[Function]}
                                                  onLeave={[Function]}
                                                  transitionAppear={true}
                                                  transitionEnter={true}
                                                  transitionLeave={true}
                                                  transitionName="show-help"
                                                />
                                              </div>
                                            </div>
                                          </Col>
                                        </div>
                                      </Row>
                                    </FormItem>
                                  </FormField>
                                </FieldInner>
                              </FormikConnect(FieldInner)>
                              <FormikConnect(FieldInner)
                                component={[Function]}
                              >
                                <FieldInner
                                  component={[Function]}
                                  formik={
                                    Object {
                                      "dirty": false,
                                      "errors": Object {},
                                      "handleBlur": [Function],
                                      "handleChange": [Function],
                                      "handleReset": [Function],
                                      "handleSubmit": [Function],
                                      "initialValues": Object {
                                        "password": "",
                                        "username": "",
                                      },
                                      "isSubmitting": false,
                                      "isValid": false,
                                      "isValidating": false,
                                      "registerField": [Function],
                                      "resetForm": [Function],
                                      "setError": [Function],
                                      "setErrors": [Function],
                                      "setFieldError": [Function],
                                      "setFieldTouched": [Function],
                                      "setFieldValue": [Function],
                                      "setFormikState": [Function],
                                      "setStatus": [Function],
                                      "setSubmitting": [Function],
                                      "setTouched": [Function],
                                      "setValues": [Function],
                                      "status": undefined,
                                      "submitCount": 0,
                                      "submitForm": [Function],
                                      "touched": Object {},
                                      "unregisterField": [Function],
                                      "validate": undefined,
                                      "validateField": [Function],
                                      "validateForm": [Function],
                                      "validateOnBlur": true,
                                      "validateOnChange": true,
                                      "validationSchema": [Function],
                                      "values": Object {
                                        "password": "",
                                        "username": "",
                                      },
                                    }
                                  }
                                >
                                  <FormButton
                                    field={
                                      Object {
                                        "name": undefined,
                                        "onBlur": [Function],
                                        "onChange": [Function],
                                        "value": Object {
                                          "password": "",
                                          "username": "",
                                        },
                                      }
                                    }
                                    form={
                                      Object {
                                        "dirty": false,
                                        "errors": Object {},
                                        "handleBlur": [Function],
                                        "handleChange": [Function],
                                        "handleReset": [Function],
                                        "handleSubmit": [Function],
                                        "initialValues": Object {
                                          "password": "",
                                          "username": "",
                                        },
                                        "isSubmitting": false,
                                        "isValid": false,
                                        "isValidating": false,
                                        "registerField": [Function],
                                        "resetForm": [Function],
                                        "setError": [Function],
                                        "setErrors": [Function],
                                        "setFieldError": [Function],
                                        "setFieldTouched": [Function],
                                        "setFieldValue": [Function],
                                        "setFormikState": [Function],
                                        "setStatus": [Function],
                                        "setSubmitting": [Function],
                                        "setTouched": [Function],
                                        "setValues": [Function],
                                        "status": undefined,
                                        "submitCount": 0,
                                        "submitForm": [Function],
                                        "touched": Object {},
                                        "unregisterField": [Function],
                                        "validateField": [Function],
                                        "validateForm": [Function],
                                        "validateOnBlur": true,
                                        "validateOnChange": true,
                                        "values": Object {
                                          "password": "",
                                          "username": "",
                                        },
                                      }
                                    }
                                  >
                                    <Button
                                      block={false}
                                      ghost={false}
                                      htmlType="submit"
                                      loading={false}
                                      type="primary"
                                    >
                                      <Wave>
                                        <button
                                          className="ant-btn ant-btn-primary"
                                          onClick={[Function]}
                                          type="submit"
                                        >
                                          <span
                                            key=".0"
                                          >
                                            Log in
                                          </span>
                                        </button>
                                      </Wave>
                                    </Button>
                                  </FormButton>
                                </FieldInner>
                              </FormikConnect(FieldInner)>
                            </form>
                          </Component>
                        </Form>
                      </article>
                    </Typography>
                  </div>
                </Row>
              </main>
            </Basic>
          </Adapter>
        </section>
      </BasicLayout>
    </Adapter>
  </div>
</LoginForm>
`;

exports[`Container: LoginForm check validationSchema 1`] = `
ObjectSchema {
  "_blacklist": RefSet {
    "list": Set {},
    "refs": Map {},
  },
  "_conditions": Array [],
  "_defaultDefault": [Function],
  "_deps": Array [],
  "_excludedEdges": Array [],
  "_exclusive": Object {},
  "_mutate": undefined,
  "_nodes": Array [
    "password",
    "username",
  ],
  "_options": Object {
    "abortEarly": true,
    "recursive": true,
  },
  "_type": "object",
  "_typeError": [Function],
  "_whitelist": RefSet {
    "list": Set {},
    "refs": Map {},
  },
  "fields": Object {
    "password": StringSchema {
      "_blacklist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "_conditions": Array [],
      "_deps": Array [],
      "_exclusive": Object {
        "min": true,
        "required": true,
      },
      "_mutate": undefined,
      "_options": Object {
        "abortEarly": true,
        "recursive": true,
      },
      "_type": "string",
      "_typeError": [Function],
      "_whitelist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "tests": Array [
        [Function],
        [Function],
      ],
      "transforms": Array [
        [Function],
      ],
    },
    "username": StringSchema {
      "_blacklist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "_conditions": Array [],
      "_deps": Array [],
      "_exclusive": Object {
        "required": true,
        "undefined": false,
      },
      "_mutate": undefined,
      "_options": Object {
        "abortEarly": true,
        "recursive": true,
      },
      "_type": "string",
      "_typeError": [Function],
      "_whitelist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "tests": Array [
        [Function],
        [Function],
      ],
      "transforms": Array [
        [Function],
      ],
    },
  },
  "tests": Array [],
  "transforms": Array [
    [Function],
  ],
}
`;
