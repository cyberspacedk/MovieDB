// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Container: LoginForm Snapshot: should match 1`] = `
<Connect(WithFormik(LoginForm))
  sessionID={true}
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
  username="movie__watcher"
>
  <WithFormik(LoginForm)
    authUser={[Function]}
    sessionID={true}
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
    username="movie__watcher"
  >
    <Formik
      authUser={[Function]}
      enableReinitialize={false}
      handleSubmit={[Function]}
      initialValues={
        Object {
          "password": "",
          "username": "",
        }
      }
      isInitialValid={false}
      onSubmit={[Function]}
      render={[Function]}
      sessionID={true}
      store={
        Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        }
      }
      username="movie__watcher"
      validateOnBlur={true}
      validateOnChange={true}
      validationSchema={[Function]}
    >
      <LoginForm
        authUser={[Function]}
        dirty={false}
        errors={Object {}}
        handleBlur={[Function]}
        handleChange={[Function]}
        handleReset={[Function]}
        handleSubmit={[Function]}
        initialValues={
          Object {
            "password": "",
            "username": "",
          }
        }
        isSubmitting={false}
        isValid={false}
        isValidating={false}
        registerField={[Function]}
        resetForm={[Function]}
        sessionID={true}
        setError={[Function]}
        setErrors={[Function]}
        setFieldError={[Function]}
        setFieldTouched={[Function]}
        setFieldValue={[Function]}
        setFormikState={[Function]}
        setStatus={[Function]}
        setSubmitting={[Function]}
        setTouched={[Function]}
        setValues={[Function]}
        store={
          Object {
            "clearActions": [Function],
            "dispatch": [Function],
            "getActions": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          }
        }
        submitCount={0}
        submitForm={[Function]}
        touched={Object {}}
        unregisterField={[Function]}
        username="movie__watcher"
        validateField={[Function]}
        validateForm={[Function]}
        validateOnBlur={true}
        validateOnChange={true}
        values={
          Object {
            "password": "",
            "username": "",
          }
        }
      >
        <Form>
          <Component
            formik={
              Object {
                "dirty": false,
                "errors": Object {},
                "handleBlur": [Function],
                "handleChange": [Function],
                "handleReset": [Function],
                "handleSubmit": [Function],
                "initialValues": Object {
                  "password": "",
                  "username": "",
                },
                "isSubmitting": false,
                "isValid": false,
                "isValidating": false,
                "registerField": [Function],
                "resetForm": [Function],
                "setError": [Function],
                "setErrors": [Function],
                "setFieldError": [Function],
                "setFieldTouched": [Function],
                "setFieldValue": [Function],
                "setFormikState": [Function],
                "setStatus": [Function],
                "setSubmitting": [Function],
                "setTouched": [Function],
                "setValues": [Function],
                "status": undefined,
                "submitCount": 0,
                "submitForm": [Function],
                "touched": Object {},
                "unregisterField": [Function],
                "validate": undefined,
                "validateField": [Function],
                "validateForm": [Function],
                "validateOnBlur": true,
                "validateOnChange": true,
                "validationSchema": [Function],
                "values": Object {
                  "password": "",
                  "username": "",
                },
              }
            }
          >
            <form
              onReset={[Function]}
              onSubmit={[Function]}
            >
              <FormikConnect(FieldInner)
                component={[Function]}
                name="username"
              >
                <FieldInner
                  component={[Function]}
                  formik={
                    Object {
                      "dirty": false,
                      "errors": Object {},
                      "handleBlur": [Function],
                      "handleChange": [Function],
                      "handleReset": [Function],
                      "handleSubmit": [Function],
                      "initialValues": Object {
                        "password": "",
                        "username": "",
                      },
                      "isSubmitting": false,
                      "isValid": false,
                      "isValidating": false,
                      "registerField": [Function],
                      "resetForm": [Function],
                      "setError": [Function],
                      "setErrors": [Function],
                      "setFieldError": [Function],
                      "setFieldTouched": [Function],
                      "setFieldValue": [Function],
                      "setFormikState": [Function],
                      "setStatus": [Function],
                      "setSubmitting": [Function],
                      "setTouched": [Function],
                      "setValues": [Function],
                      "status": undefined,
                      "submitCount": 0,
                      "submitForm": [Function],
                      "touched": Object {},
                      "unregisterField": [Function],
                      "validate": undefined,
                      "validateField": [Function],
                      "validateForm": [Function],
                      "validateOnBlur": true,
                      "validateOnChange": true,
                      "validationSchema": [Function],
                      "values": Object {
                        "password": "",
                        "username": "",
                      },
                    }
                  }
                  name="username"
                >
                  <FormField
                    field={
                      Object {
                        "name": "username",
                        "onBlur": [Function],
                        "onChange": [Function],
                        "value": "",
                      }
                    }
                    form={
                      Object {
                        "dirty": false,
                        "errors": Object {},
                        "handleBlur": [Function],
                        "handleChange": [Function],
                        "handleReset": [Function],
                        "handleSubmit": [Function],
                        "initialValues": Object {
                          "password": "",
                          "username": "",
                        },
                        "isSubmitting": false,
                        "isValid": false,
                        "isValidating": false,
                        "registerField": [Function],
                        "resetForm": [Function],
                        "setError": [Function],
                        "setErrors": [Function],
                        "setFieldError": [Function],
                        "setFieldTouched": [Function],
                        "setFieldValue": [Function],
                        "setFormikState": [Function],
                        "setStatus": [Function],
                        "setSubmitting": [Function],
                        "setTouched": [Function],
                        "setValues": [Function],
                        "status": undefined,
                        "submitCount": 0,
                        "submitForm": [Function],
                        "touched": Object {},
                        "unregisterField": [Function],
                        "validateField": [Function],
                        "validateForm": [Function],
                        "validateOnBlur": true,
                        "validateOnChange": true,
                        "values": Object {
                          "password": "",
                          "username": "",
                        },
                      }
                    }
                  >
                    <styled.div>
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-bdVaJa",
                              "isStatic": true,
                              "lastClassName": "bBnrsp",
                              "rules": Array [
                                "
  position: relative;
  display: flex;
  justify-content: flex-end;
  input {
    margin-bottom: 3px;
  }
  [name='error-message'] {
    position: absolute;
    width: 100%;
    left: -100%;
    top: 0;
    color: #f70f16;
    font-size: 0.9rem;
  }
",
                              ],
                            },
                            "displayName": "styled.div",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "self": [Circular],
                            "styledComponentId": "sc-bdVaJa",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <div
                          className="sc-bdVaJa bBnrsp"
                        >
                          <input
                            name="username"
                            onBlur={[Function]}
                            onChange={[Function]}
                            placeholder="Username"
                            type="text"
                            value=""
                          />
                        </div>
                      </StyledComponent>
                    </styled.div>
                  </FormField>
                </FieldInner>
              </FormikConnect(FieldInner)>
              <FormikConnect(FieldInner)
                component={[Function]}
                name="password"
                type="password"
              >
                <FieldInner
                  component={[Function]}
                  formik={
                    Object {
                      "dirty": false,
                      "errors": Object {},
                      "handleBlur": [Function],
                      "handleChange": [Function],
                      "handleReset": [Function],
                      "handleSubmit": [Function],
                      "initialValues": Object {
                        "password": "",
                        "username": "",
                      },
                      "isSubmitting": false,
                      "isValid": false,
                      "isValidating": false,
                      "registerField": [Function],
                      "resetForm": [Function],
                      "setError": [Function],
                      "setErrors": [Function],
                      "setFieldError": [Function],
                      "setFieldTouched": [Function],
                      "setFieldValue": [Function],
                      "setFormikState": [Function],
                      "setStatus": [Function],
                      "setSubmitting": [Function],
                      "setTouched": [Function],
                      "setValues": [Function],
                      "status": undefined,
                      "submitCount": 0,
                      "submitForm": [Function],
                      "touched": Object {},
                      "unregisterField": [Function],
                      "validate": undefined,
                      "validateField": [Function],
                      "validateForm": [Function],
                      "validateOnBlur": true,
                      "validateOnChange": true,
                      "validationSchema": [Function],
                      "values": Object {
                        "password": "",
                        "username": "",
                      },
                    }
                  }
                  name="password"
                  type="password"
                >
                  <FormField
                    field={
                      Object {
                        "name": "password",
                        "onBlur": [Function],
                        "onChange": [Function],
                        "value": "",
                      }
                    }
                    form={
                      Object {
                        "dirty": false,
                        "errors": Object {},
                        "handleBlur": [Function],
                        "handleChange": [Function],
                        "handleReset": [Function],
                        "handleSubmit": [Function],
                        "initialValues": Object {
                          "password": "",
                          "username": "",
                        },
                        "isSubmitting": false,
                        "isValid": false,
                        "isValidating": false,
                        "registerField": [Function],
                        "resetForm": [Function],
                        "setError": [Function],
                        "setErrors": [Function],
                        "setFieldError": [Function],
                        "setFieldTouched": [Function],
                        "setFieldValue": [Function],
                        "setFormikState": [Function],
                        "setStatus": [Function],
                        "setSubmitting": [Function],
                        "setTouched": [Function],
                        "setValues": [Function],
                        "status": undefined,
                        "submitCount": 0,
                        "submitForm": [Function],
                        "touched": Object {},
                        "unregisterField": [Function],
                        "validateField": [Function],
                        "validateForm": [Function],
                        "validateOnBlur": true,
                        "validateOnChange": true,
                        "values": Object {
                          "password": "",
                          "username": "",
                        },
                      }
                    }
                    type="password"
                  >
                    <styled.div>
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-bdVaJa",
                              "isStatic": true,
                              "lastClassName": "bBnrsp",
                              "rules": Array [
                                "
  position: relative;
  display: flex;
  justify-content: flex-end;
  input {
    margin-bottom: 3px;
  }
  [name='error-message'] {
    position: absolute;
    width: 100%;
    left: -100%;
    top: 0;
    color: #f70f16;
    font-size: 0.9rem;
  }
",
                              ],
                            },
                            "displayName": "styled.div",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "self": [Circular],
                            "styledComponentId": "sc-bdVaJa",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <div
                          className="sc-bdVaJa bBnrsp"
                        >
                          <input
                            name="password"
                            onBlur={[Function]}
                            onChange={[Function]}
                            placeholder="Username"
                            type="password"
                            value=""
                          />
                        </div>
                      </StyledComponent>
                    </styled.div>
                  </FormField>
                </FieldInner>
              </FormikConnect(FieldInner)>
              <FormikConnect(FieldInner)
                component={[Function]}
              >
                <FieldInner
                  component={[Function]}
                  formik={
                    Object {
                      "dirty": false,
                      "errors": Object {},
                      "handleBlur": [Function],
                      "handleChange": [Function],
                      "handleReset": [Function],
                      "handleSubmit": [Function],
                      "initialValues": Object {
                        "password": "",
                        "username": "",
                      },
                      "isSubmitting": false,
                      "isValid": false,
                      "isValidating": false,
                      "registerField": [Function],
                      "resetForm": [Function],
                      "setError": [Function],
                      "setErrors": [Function],
                      "setFieldError": [Function],
                      "setFieldTouched": [Function],
                      "setFieldValue": [Function],
                      "setFormikState": [Function],
                      "setStatus": [Function],
                      "setSubmitting": [Function],
                      "setTouched": [Function],
                      "setValues": [Function],
                      "status": undefined,
                      "submitCount": 0,
                      "submitForm": [Function],
                      "touched": Object {},
                      "unregisterField": [Function],
                      "validate": undefined,
                      "validateField": [Function],
                      "validateForm": [Function],
                      "validateOnBlur": true,
                      "validateOnChange": true,
                      "validationSchema": [Function],
                      "values": Object {
                        "password": "",
                        "username": "",
                      },
                    }
                  }
                >
                  <FormButton
                    field={
                      Object {
                        "name": undefined,
                        "onBlur": [Function],
                        "onChange": [Function],
                        "value": Object {
                          "password": "",
                          "username": "",
                        },
                      }
                    }
                    form={
                      Object {
                        "dirty": false,
                        "errors": Object {},
                        "handleBlur": [Function],
                        "handleChange": [Function],
                        "handleReset": [Function],
                        "handleSubmit": [Function],
                        "initialValues": Object {
                          "password": "",
                          "username": "",
                        },
                        "isSubmitting": false,
                        "isValid": false,
                        "isValidating": false,
                        "registerField": [Function],
                        "resetForm": [Function],
                        "setError": [Function],
                        "setErrors": [Function],
                        "setFieldError": [Function],
                        "setFieldTouched": [Function],
                        "setFieldValue": [Function],
                        "setFormikState": [Function],
                        "setStatus": [Function],
                        "setSubmitting": [Function],
                        "setTouched": [Function],
                        "setValues": [Function],
                        "status": undefined,
                        "submitCount": 0,
                        "submitForm": [Function],
                        "touched": Object {},
                        "unregisterField": [Function],
                        "validateField": [Function],
                        "validateForm": [Function],
                        "validateOnBlur": true,
                        "validateOnChange": true,
                        "values": Object {
                          "password": "",
                          "username": "",
                        },
                      }
                    }
                  >
                    <Button
                      block={false}
                      ghost={false}
                      htmlType="submit"
                      loading={false}
                      type="primary"
                    >
                      <Wave>
                        <button
                          className="ant-btn ant-btn-primary"
                          onClick={[Function]}
                          type="submit"
                        >
                          <span
                            key=".0"
                          >
                            Login
                          </span>
                        </button>
                      </Wave>
                    </Button>
                  </FormButton>
                </FieldInner>
              </FormikConnect(FieldInner)>
            </form>
          </Component>
        </Form>
      </LoginForm>
    </Formik>
  </WithFormik(LoginForm)>
</Connect(WithFormik(LoginForm))>
`;

exports[`Container: LoginForm check validationSchema 1`] = `
ObjectSchema {
  "_blacklist": RefSet {
    "list": Set {},
    "refs": Map {},
  },
  "_conditions": Array [],
  "_defaultDefault": [Function],
  "_deps": Array [],
  "_excludedEdges": Array [],
  "_exclusive": Object {},
  "_mutate": undefined,
  "_nodes": Array [
    "password",
    "username",
  ],
  "_options": Object {
    "abortEarly": true,
    "recursive": true,
  },
  "_type": "object",
  "_typeError": [Function],
  "_whitelist": RefSet {
    "list": Set {},
    "refs": Map {},
  },
  "fields": Object {
    "password": StringSchema {
      "_blacklist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "_conditions": Array [],
      "_deps": Array [],
      "_exclusive": Object {
        "min": true,
        "required": true,
      },
      "_mutate": undefined,
      "_options": Object {
        "abortEarly": true,
        "recursive": true,
      },
      "_type": "string",
      "_typeError": [Function],
      "_whitelist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "tests": Array [
        [Function],
        [Function],
      ],
      "transforms": Array [
        [Function],
      ],
    },
    "username": StringSchema {
      "_blacklist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "_conditions": Array [],
      "_deps": Array [],
      "_exclusive": Object {
        "min": true,
        "required": true,
        "undefined": false,
      },
      "_mutate": undefined,
      "_options": Object {
        "abortEarly": true,
        "recursive": true,
      },
      "_type": "string",
      "_typeError": [Function],
      "_whitelist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "tests": Array [
        [Function],
        [Function],
        [Function],
      ],
      "transforms": Array [
        [Function],
      ],
    },
  },
  "tests": Array [],
  "transforms": Array [
    [Function],
  ],
}
`;
